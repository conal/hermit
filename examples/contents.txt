Concatenate Vanishes
====================

* A common script for all our Concatenate Vanishes examples.

* Main script completed.

* Assumption A scripted.

* Interesting rewrites: push, innermost, unfold-rule

* It works for all three examples, but I doubt it would work for *any* concat vanishes example.

* Notes: unsafe uses of RULES with pre-conditions.


Evaluation
==========

* Evaluation of Hutton's Razor with exceptions.

* Convert to CPS to avoid repeated pattern matching.

* Main script completed.

* Assumption A scripted.

* Interesting rewrites: abstract, fold


Factorial
=========

* The classic boxing/unboxing example.

* Main script completed.

* Assumption A scripted (but it may not be valid, needs thinking about)


Fibonacci (Tupling)
===================

* Example of Tupling transformation.

* Main script completed and published.

* Assumption A scripted.

* Interesting rewrites: ww-split tactic, case-split(-inline), fold, remember (and fold/unfold remembered defns), let-tuple


Fibonacci (Stream Memoisation)
===================

* Example of Memoisation.

* Main script completed.

* Interesting rewrites: ww-split tactic


Fix-Fusion
==========

* Example of how to use the Fixed-Point Fusion Rule.

* This is a trivial example to demonstrate how do equational reasoning in HERMIT.

* Interesting rewrites: fix-fusion-rule


Flatten
=======

* Another concatenate-vanishes example, based on the Reverse example.

* Main script completed.

* Assumption A scripted.

* Main rewrites: any-call


Hanoi
=====

* Another tupling transformation

* Main script completed.

* Interesting rewrites: ww-split tactic, case-split(-inline), fold, remember (and fold/unfold remembered defns), let-tuple


Haskell 2012 Paper
==================

Fibonacci (Unrolling)
---------------------

* We unfold fib once to show how things operate overall.

* Main rewrites: any-bu, inline (UPDATE: "remember" now required)


Reverse
-------

* Our larger, low-level reverse example.

* Main rewrites: any-bu, unfold


Append
------

* A demonstration of GHC RULES (no use of HERMIT).


IFL 2012 Paper
==================

Fibonacci (Tupling)
-------------------

* Example of Tupling transformation.

* Interesting rewrites: ww-split tactic, case-split(-inline), fold, remember (fold/unfold remembered defns), let-tuple


Last
====

* A classic simple example.

* Assumption B scripted.

* Main script completed.


Length
======

* Another accumulation example, but this time accumulating an Int.

* Taken from: http://www.haskell.org/haskellwiki/Performance/Accumulating_parameter

* Completed

* Interesting rewrites: case-seq


Map
===

* List unrolling.

* Main script completed.

* Main rewrites: simplify, any-call, unfold, case-split(-inline), remember.


Mean
====

* Problem (and pen-and-paper calculation) provided by Jason Reich.

* A non-WW tupling example (maybe it can be cast as WW, I'm not sure).

* Main script completed.

* Interesting rewrites: abstract, remember, fold, let-intro, let-float, let-tuple


New Reverse
===========

* New derivation of classic reverse example using new worker/wrapper rewrites.

* Introduces lemmas during transformation, which are subsequently proved.

* Interesting rewrites: split-1-beta, prove-lemma, unfold-rule


Nub
===

* A new (that is, unpublished) worker/wrapper example.

* Andy's original pen-and-paper derivation is no longer valid due to a change in the Data.Set module.

* A corrected version is in the files named "Revised".

* Mechanized using new worker/wrapper rewrites.

* Interesting rewrites: split-2-beta, prove-lemma, unfold-rule


Quicksort
=========

* Another concatenate-vanishes example.

* Main script completed.

* Assumption A scripted.

* Main rewrites: any-call


Reverse and ReverseWW
=====================

* Higher-level script than in the Haskell 2012 paper.

* The WW version uses the WW-Split Tactic.

* Main script completed.  Lower-level version has been published.

* Assumption A scripted.

* Main rewrites: any-call




Talks
=====

* This directory is for the code that Neil demonstrated at Nottingham (2012), IFL (2012), Haskell (2012), MVD (2012) and TFP (2013).


To Do
=====

* Life - Can we translate to a stronger type?

* Kansas Lava example?


