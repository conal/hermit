--------------------------------------------
-- Verify append-assoc
--
-- forall x y z.  x ++ (y ++ z) = (x ++ y) ++ z
--
--------------------------------------------

-- To test this script:
--   prog-end
--   load-and-run "verify-append-assoc.hec"
--   show-lemmas

rule-to-lemma "append-assoc"

load-and-run "verify-nil-append.hec"

-- first do the proof interactively
--

-- Begin with the lhs
-- {rule-lhs-intro "append-assoc"
-- consider lam ; lams-body

-- case-split-inline 'x
-- {case-alt 0
--   any-bu (forward (lemma "nil-append"))
-- yields:  [] → (++) y z
-- }
-- {case-alt 1
--    one-bu (inline '++) ; smash
--    one-bu (forward (lemma-unsafe append-assoc))  -- use  ind-hyp-0 in script
-- yields:  (:) a b → (:) a ((++) ((++) b y) z)
-- }
--}

-- Now, for the rhs
-- {rule-rhs-intro "append-assoc"
-- consider lam ; lams-body

-- case-split-inline 'x
-- {case-alt 0
--   any-bu (forward (lemma "nil-append"))
-- yields:  [] → (++) y z
-- }
-- {case-alt 1
--    one-bu (inline '++) ; smash
--    one-bu (inline '++) ; smash
-- yields:  (:) a b → (:) a ((++) ((++) b y) z)
-- }
-- }
--
---- then encode the proof as a rewrite or script
define-script "append-assoc-nil"  "any-bu (lemma-forward nil-append)"
define-script "append-assoc-cons-left"  "one-bu (inline '++) ; smash ; one-bu (lemma-forward ind-hyp-0)"

define-script "append-assoc-cons-right" "one-bu (inline '++) ; smash ; one-bu (inline '++) ; smash "

--verify-lemma "append-assoc" (inductive-proof-both-sides 'x [ '"[]" , ': ] [ append-assoc-nil , append-assoc-cons-left ] [ append-assoc-nil , append-assoc-cons-right ] )

script-to-rewrite append-assoc-nil "append-assoc-nil"
script-to-rewrite append-assoc-cons-left "append-assoc-cons-left"

prove-lemma "append-assoc"
induction 'x

{ [forall-body]

  -- undefined case
  { [conj-lhs]
    { [forall-body]
      { [eq-lhs]
        one-bu (inline '++)
      }
      { [eq-rhs]
        one-bu (inline '++)
      }
      smash
      { [eq-rhs]
        one-td (inline '++)
      }
      smash
    }
  }

    -- nil case
  { [conj-rhs, conj-lhs]
    { [forall-body]
      { [eq-lhs]
        one-bu (inline '++)
      }
      smash
      { [eq-rhs, app-fun, app-arg]
        lemma-forward nil-append
      }
      reflexivity
    }
  }

    -- cons case
  { [conj-rhs, conj-rhs, forall-body, consequent]
    one-td (inline '++)
    smash
    one-bu (lemma-forward ind-hyp-0)

      -- Float (:) call out:
    { [eq-rhs]
      one-bu (inline '++)
      smash
      one-bu (inline '++)
      smash
    }

    reflexivity
  }
  smash  -- 'a => true' is true
}
end-proof

