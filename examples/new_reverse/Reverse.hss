set-pp-type Show

flatten-module

-- first, do the actual transformation
binding-of 'rev
fix-intro
application-of 'fix

-- crucial w/w split step, using condition 1-beta
-- introduces unproven lemma for assumption C named rev-assumption
split-1-beta "rev" [| absR |] [| repR |]

any-call (unfold ['absR,'repR])
simplify
one-td (case-float-arg-lemma repHstrict) -- note: introduces an unproven lemma named repHstrict
one-td (unfold-rule "repH ++")           -- note: introduces an unproven lemma named "repH ++"
simplify
one-td (unfold-rule "repH-absH-fusion")  -- note: introduces an unproven lemma named repH-absH-fusion

-- TODO: this doesn't work yet
-- fusion rule in terms of repR and absR, we need in terms of repH and absR
-- modify-lemma rev-fusion (lhs ((any-call (unfold ['repR,'absR])) >+> smash))

one-td (unfold-rule "repH (:)")          -- note: introduces an unproven lemma named "repH (:)"
any-td (unfold-rule "repH []")           -- note: introduces an unproven lemma named "repH []"
any-call (unfold 'fix)
any-call (unfold 'absH)
bash
unshadow

-- transformation complete, now we can prove the lemmas

prove-lemma repHstrict
lhs unfold
lhs (one-td (unfold-rule appendFix))
lhs unfold
both (innermost undefined-expr)
end-proof

prove-lemma "repH []"
lhs unfold
extensionality
lhs (one-td (unfold-rule appendFix))
lhs unfold
both smash
end-proof

prove-lemma "repH (:)"
both (any-call (unfold 'repH))
both (any-call (unfold-rule appendFix))
both smash
lhs (unfold >>> smash)
end-proof

prove-lemma "repH ++"
both (any-call (unfold 'repH))
both (any-call (unfold-rule appendFix))
lhs (eta-expand 'x)
rhs unfold
induction 'xs
-- undefined
both (replicate 2 (any-call (unfold 'myAppend)))
both (innermost undefined-expr)
end-case
-- []
both (replicate 2 (any-call (unfold 'myAppend)))
both smash
end-case
-- (:)
both (one-td unfold)
lhs (one-td unfold)
both smash
rhs (one-td (backward (lemma ind-hyp-0)))
end-case

-- This auxilliary lemma greatly simplifies the proof of rev-assumption
rule-to-lemma "++ []"
prove-lemma "++ []"
lhs (one-td (unfold-rule appendFix))
induction 'xs
lhs unfold
lhs undefined-expr
end-case
lhs unfold
lhs simplify
end-case
lhs unfold
lhs simplify
lhs (one-td (forward (lemma ind-hyp-0)))
end-case

prove-lemma "rev-assumption"
both (unfold >>> smash)
lhs (replicate 4 (one-td unfold >+> smash))
lhs (one-td (forward (lemma "++ []")))
end-proof
